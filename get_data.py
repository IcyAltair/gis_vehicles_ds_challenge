import os
import pandas as pd
from matplotlib import pyplot as plt
# input files for vehicle: 
# fuelLevel (T), ingection (T), refueling2 (T), speedAndHeight (T), tachometer (T)



# get all files with vehicle word in name
filenames = [filename for filename in os.listdir() if filename.find('vehicle') != -1]

def get_unique_vehicles_sensors(filenames):
    vehicles, sensors = set(), set()
    for filename in filenames:
        vehicle_name, sensor_type, _ = filename.split('_')
        vehicles.add(vehicle_name)
        sensors.add(sensor_type)
    return list(vehicles), list(sensors)
    
vehicles, sensors = get_unique_vehicles_sensors(filenames)

# sort vehicle names and sensor types
vehicles.sort()
sensors.sort()

# show it
vehicles, sensors

vehicles_data = pd.Series()
for vehicle_name in vehicles:
    vehicle = pd.Series()
    for sensor in sensors:
        sensor_df = pd.read_csv('_'.join([vehicle_name, sensor, 'public.csv']), sep=';')
        vehicle[sensor] = sensor_df
    vehicles_data[vehicle_name] = vehicle
    
def convert_number(num_as_string):
    """
        function converts numbers from string format N,n (replace all commas with dots) 
        to pandas Series float value format N.n (real number)
    """

    return num_as_string.str.replace(',', '.').astype('float')


def convert_date(date_as_string):
    """
        function converts date from string to datetime64 pandas date format
    """
    
    return date_as_string.astype('datetime64')


# replace commas with dots and change type from object to float64
for vehicle in vehicles:
    # fuelLevel dataset preproccess
    for sensor in sensors:
        sensor_data = vehicles_data[vehicle][sensor]
        values = sensor_data.columns
        for value in values:
            # three types: int | float | date
            # need to become: int->int str->float (if BEVALUE) and not int64 already
            # check correctness using print(vehicle, sensor, sensor_data, value)
            if sensor_data[value].dtype == 'object':
                date_like_columns = ['DTIME', 'STARTDATE', 'ENDDATE']
                if value in date_like_columns:
                    sensor_data[value] = convert_date(sensor_data[value])
                else:
                    sensor_data[value] = convert_number(sensor_data[value])
            # if not object do nothing (cause int64 -> (goes to) int64 by default)
            
vehicles_data['vehicle1'].fuelLevel.dtypes

for vehicle in vehicles:
    # fuel level features
    current_vehicle = vehicles_data[vehicle]
    df = current_vehicle.fuelLevel
    current_vehicle['max_fuel'] = df.BEVALUE.max()
    
    # height features
    df = current_vehicle.speedAndHeight
    current_vehicle['max_height'] = df.HEIGHT.max()
    current_vehicle['min_height'] = df.HEIGHT.min()
    current_vehicle['avg_height'] = df.HEIGHT.mean()
    current_vehicle['range_height'] = df.HEIGHT.max() - df.HEIGHT.min()
    
    # speed features
    vehicles_data[vehicle]['max_speed'] = df.SPEED.max()
    # vehicles_data[vehicle]['min_speed'] = df.SPEED.min() -- not informative cause min is 0 for all
    vehicles_data[vehicle]['avg_speed'] = df.SPEED.mean()
    # vehicles_data[vehicle]['range_speed'] = df.SPEED.max() - df.SPEED.min() -- not informative cause max_speed 
    # make dataframe with new features
vehicles_df = pd.DataFrame()

for vehicle in vehicles:
    # get only features generated by us
    generated_features = list(set(vehicles_data[vehicle].index) - set(sensors))
    vehicles_df[vehicle] = vehicles_data[vehicle][generated_features]
    
vehicles_data['vehicle1'].fuelLevel.BEVALUE
vehicles_df

vdft = vehicles_df.transpose()

dp = list(vdft[['max_fuel', 'max_speed']].values)
X = [el[0] for el in dp]
y = [el[1] for el in dp]

#plt.scatter(X, y)
#plt.xlabel('max_fuel')
#plt.ylabel('max_speed')
#plt.figure(figsize=(12,12))
#plt.show()

#plt.plot(list(vehicles_data['vehicle1'].tachometer.BEVALUE[:30]))
#plt.plot(list(vehicles_data['vehicle1'].fuelLevel.BEVALUE[:30]))
#plt.plot(list(vehicles_data['vehicle1'].speedAndHeight.HEIGHT[:30]))